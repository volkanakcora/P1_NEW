Configuring Ansible:

The behavior of an Ansible installation can be customized by modifying settings in the Ansible configuration file.

Using #/etc/ansible/ansible.cfg
The ansible package provides a base configuration file located at /etc/ansible/ansible.cfg. This file is used if no other configuration file is found.

Using #~/.ansible.cfg
Ansible looks for a .ansible.cfg file in the user's home directory. This configuration is used instead of the /etc/ansible/ansible.cfg if it exists 
and if there is no ansible.cfg file in the current working directory.


Using #./ansible.cfg
If an ansible.cfg file exists in the directory in which the ansible command is executed, it is used instead of the global file or the user's personal 
file. This allows administrators to create a directory structure where 
different environments or projects are stored in separate directories, with each directory containing a configuration file tailored 
with a unique set of settings.


!!!!! It is unusual to use a ~/.ansible.cfg or /etc/ansible/ansible.cfg file in practice. 



Configuration File Precedence:

- Any file specified by the ANSIBLE_CONFIG environment variable overrides all other configuration files. If that variable is not set, the 
directory in which the ansible command was run is then checked for an ansible.cfg file If that file is not present, the user's home directory is checked for a .ansible.cfg file. The global /etc/ansible/ansible.cfg file is only used 
if no other configuration file is found. If the /etc/ansible/ansible.cfg configuration file is not present, Ansible contains defaults which it uses.

- The first file located in the search order is the one that Ansible selects. Ansible only uses configuration settings from the first file that it finds.



- Because of the multitude of locations in which Ansible configuration files can be placed, it can be confusing which configuration file is 
being used by Ansible. You can run the ansible --version command to clearly identify which version of Ansible is installed, and which configuration 
file is being used.

#[user@controlnode ~]$ ansible --version
ansible 2.9.21
  config file = /etc/ansible/ansible.cfg
...output omitted...

Another way to display the active Ansible configuration file is to use the -v option when executing Ansible commands on the command line.

#[user@controlnode ~]$ ansible servers --list-hosts -v
Using /etc/ansible/ansible.cfg as config file
...output omitted.


Managing Settings in the Configuration File:

with each section containing settings defined as key-value pairs. Section titles are enclosed in square brackets. 
For basic operation use the following two sections

[defaults] sets defaults for Ansible operation

[privilege_escalation] configures how Ansible performs privilege escalation on managed hosts

For example, the following is a typical ansible.cfg file:

[defaults] sets defaults for Ansible operation                                             
inventory = ./inventory
remote_user = user
ask_pass = false

[privilege_escalation]  configures how Ansible performs privilege escalation on managed hosts
become = true
become_method = sudo
become_user = root
become_ask_pass = false


inventory:	Specifies the path to the inventory file.
remote_user:	The name of the user to log in as on the managed hosts. If not specified, the current user's name is used.
ask_pass:	Whether or not to prompt for an SSH password. Can be false if using SSH public key authentication.
become:	Whether to automatically switch user on the managed host (typically to root) after connecting. This can also be specified by a play.
become_method:	How to switch user (typically sudo, which is the default, but su is an option).
become_user:	The user to switch to on the managed host (typically root, which is the default).
become_ask_pass:	Whether to prompt for a password for your become_method. Defaults to false.




Configuring Connections:

Ansible needs to know how to communicate with its managed hosts. One of the most common reasons to change the configuration file is to 
control which methods and users Ansible uses to administer managed hosts. Some of the information needed includes

- The location of the inventory that lists the managed hosts and host groups

- Which connection protocol to use to communicate with the managed hosts (by default, SSH), and whether or not a nonstandard network port is needed to connect to the server

- Which remote user to use on the managed hosts; this could be root or it could be an unprivileged user

- If the remote user is unprivileged, Ansible needs to know if it should try to escalate privileges to root and how to do it (for example, by using sudo)

- Whether or not to prompt for an SSH password or sudo password to log in or gain privileges


Inventory Location:

In the [defaults] section, the inventory directive can point directly to a static inventory file, or to a directory containing multiple static 
inventory files and dynamic inventory scripts.

[defaults]
inventory = ./inventory

By default, Ansible attempts to connect to the managed host using the same user name as the local user running the Ansible commands. 
To specify a different remote user, set the remote_user parameter to that user name.

[defaults]
inventory = ./inventory

remote_user = root
ask_pass = true



The following example ansible.cfg file assumes that you can connect to the managed hosts as someuser using SSH key-based authentication: 
and that someuser can use sudo to run commands as root without entering a password:

[defaults]
inventory = ./inventory
remote_user = someuser
ask_pass = false

[privilege_escalation]
become = true               [To enable privilege escalation by default, set the directive become = true in the configuration file]
become_method = sudo        [The become_method directive specifies how to escalate privileges. Several options are available, but the default is to use sudo]
become_user = root          [The become_user directive specifies which user to escalate to, but the default is root.]
become_ask_pass = false     [If the become_method mechanism chosen requires the user to enter a password to escalate privileges, you can set the become_ask_pass = true directive in the configuration file.]


Non-SSH Connections:
The protocol used by Ansible to connect to managed hosts is set by default to smart, which determines the most efficient way to use SSH. 
This can be set to other values in a number of ways.


!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! EXERCISE

1- Confirm that your final inventory file looks like the following:

[myself]
localhost

[intranetweb]
servera.lab.example.com

[internetweb]
serverb.lab.example.com

[web:children]
intranetweb
internetweb


2- Use the ansible command with the --list-hosts option to test the configuration of your inventory file's host groups: 
This does not actually connect to those hosts:

#[student@workstation deploy-manage]$ ansible myself --list-hosts
  hosts (1):
    localhost
#[student@workstation deploy-manage]$ ansible intranetweb --list-hosts
  hosts (1):
    servera.lab.example.com
#[student@workstation deploy-manage]$ ansible internetweb --list-hosts
  hosts (1):
    serverb.lab.example.com
#[student@workstation deploy-manage]$ ansible web --list-hosts
  hosts (2):
    servera.lab.example.com
    serverb.lab.example.com
#[student@workstation deploy-manage]$ ansible all --list-hosts
  hosts (3):
    localhost
    servera.lab.example.com
    serverb.lab.example.com



3- CONFIGURE ansible conf file to escalate privileges, Confirm that the complete ansible.cfg file looks like the following:

[defaults]
inventory = ./inventory

[privilege_escalation]
become = true
become_method = sudo
become_user = root
become_ask_pass = true


- Run the ansible --list-hosts command again to verify that you are now prompted for the sudo password.

When prompted for the sudo password, enter student, even though it is not used for this dry run.

#[student@workstation deploy-manage]$ ansible intranetweb --list-hosts
BECOME password: student
  hosts (1):
    servera.lab.example.com